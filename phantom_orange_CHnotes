function addCardsToBoard(cards) {
    console.log('adding cards to board');
    var board = document.getElementById('board');
    for (var i = 0; i < cards.length; i++) {
        var cardToAdd = document.createElement('div');  // <div> </div>
        cardToAdd.setAttribute( 'data-value', cards[i]); // <div data-value="A"> </div>
        cardToAdd.setAttribute( 'class', 'smaller'); // <div data-value="A" class="small-div"> </div
        board.appendChild(cardToAdd);
        // add the verb — add the behavior
        // the behavior is that when the div is clicked it should show the data-value as a thing the user can see

        // we could query by id

        cardToAdd.onclick = function(event) {
            // `this` is the thing (the element) that is clicked!!!!!! <div data-value="A" class="small-div"> </div>
            // this.innerHTML = this.dataset.value  // <div data-value="A" class="small-div"> A </div>

            // OR

            this.innerHTML = this.getAttribute('data-value');  // <div data-value="A" class="small-div"> A </div>
            this.setAttribute('class', 'clicked');
​
        }
    };
​
​
​
​
  function compareCards(element) {
      // find all the tiles with clicked, if there are not two cards then do nothing
      // getelemtsbyclass        'clicked', if (there are two things ) {
        // compare if those tiles have matching data-values
        // as a user when i click two cards and they dont match, i want the cards to return to being blank.
        // as a user when i click two cards that match, i want the matching cards to be removed from the screen.
​
    //  } else if {  if not
        // do nothing
    //}
​
​
  }
​
// compare the data-values of the two cards OR you could compare the innerHTML of the two cards
​
​
​
// HOW DO WE KEEP TRACK OF WHICH DIVS THE USER CLICKED???
​
// 1. (This is a dumb way) we could query for all of the divs in the board div and loops over them and if any of them have inner html
​
/*
var board = document.getElementById('board');
var tiles = board.children()
var clickedTiles = []
for (var i = 0; i < tiles.length; i++) {
   if (tiles[i].innerHTMl) {
    clickedTiles.push(tiles[i])
   }
}
 we could compare the two tiles in clickedTiles to see if they have the same dataValue
*/	

var checkYoSelf = function() {
    document.getElementsByClassName('clicked';)
    for ((clicked[0].innerHTML===clicked[2].innerHTML) == true){
        console.log("Found a match!")
        /*Something to at the very least append the word match to the scoreboard
        /* which although very lame would at least let yuo count out how may match 
        words there are in some kind of array and set it to display array.length, revisit this idea
    }
  }



      // find all the tiles with clicked, if there are not two cards then do nothing
      // getelemtsbyclass        'clicked', if (there are two things ) {
        // compare if those tiles have matching data-values
        // as a user when i click two cards and they dont match, i want the cards to return to being blank.
        // as a user when i click two cards that match, i want the matching cards to be removed from the screen.
​
    //  } else if {  if not
        // do nothing
    //}
​
​
  }
​
// compare the data-values of the two cards OR you could compare the innerHTML of the two cards
​
​
​
// HOW DO WE KEEP TRACK OF WHICH DIVS THE USER CLICKED???
​
// 1. (This is a dumb way) we could query for all of the divs in the board div and loops over them and if any of them have inner html
​
/*
var board = document.getElementById('board');
var tiles = board.children()
var clickedTiles = []
for (var i = 0; i < tiles.length; i++) {
   if (tiles[i].innerHTMl) {
    clickedTiles.push(tiles[i])
   }
}
 we could compare the two tiles in clickedTiles to see if they have the same dataValue
*/  

